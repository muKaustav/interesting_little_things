# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import grpc.experimental
import schema_pb2 as schema__pb2


class TaskServiceStub(object):
    """The task service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.unary_task = channel.unary_unary(
                '/TaskService/unary_task',
                request_serializer=schema__pb2.VideoTask.SerializeToString,
                response_deserializer=schema__pb2.Response.FromString,
                )
        self.bidirectional_task = channel.stream_stream(
                '/TaskService/bidirectional_task',
                request_serializer=schema__pb2.VideoTask.SerializeToString,
                response_deserializer=schema__pb2.Response.FromString,
                )


class TaskServiceServicer(object):
    """The task service definition.
    """

    def unary_task(self, request, context):
        """Sends a task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def bidirectional_task(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'unary_task': grpc.unary_unary_rpc_method_handler(
                    servicer.unary_task,
                    request_deserializer=schema__pb2.VideoTask.FromString,
                    response_serializer=schema__pb2.Response.SerializeToString,
            ),
            'bidirectional_task': grpc.stream_stream_rpc_method_handler(
                    servicer.bidirectional_task,
                    request_deserializer=schema__pb2.VideoTask.FromString,
                    response_serializer=schema__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """The task service definition.
    """

    @staticmethod
    def unary_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/unary_task',
            schema__pb2.VideoTask.SerializeToString,
            schema__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def bidirectional_task(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/TaskService/bidirectional_task',
            schema__pb2.VideoTask.SerializeToString,
            schema__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
